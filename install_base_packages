#!/usr/bin/env bash

# TODO REFACTOR TO USE ONE COMMAND

install_base_debian () {
    sudo apt-get update
    sudo apt-get install -y curl
    sudo apt-get install -y fd-find
    sudo apt-get install -y htop
    sudo apt-get install -y httpie
    sudo apt-get install -y iotop
    sudo apt-get install -y neovim
    sudo apt-get install -y net-tools
    sudo apt-get install -y nodejs-lts-erbium
    sudo apt-get install -y npm
    sudo apt-get install -y python3
    sudo apt-get install -y python3-pip
    sudo apt-get install -y tmux
    sudo apt-get install -y universal-ctags
    sudo apt-get install -y wget
    sudo apt-get install -y zsh
    sudo apt-get install -y cargo
    sudo apt-get install -y fish
}

install_base_manjaro() {
    sudo pacman -S --needed --noconfirm base-devel
    sudo pacman -S --needed --noconfirm curl
    sudo pacman -S --needed --noconfirm htop
    sudo pacman -S --needed --noconfirm kubectl
    sudo pacman -S --needed --noconfirm neovim
    sudo pacman -S --needed --noconfirm cmake
    sudo pacman -S --needed --noconfirm go
    sudo pacman -S --needed --noconfirm reflector
    sudo pacman -S --needed --noconfirm tmux
    sudo pacman -S --needed --noconfirm wget
    sudo pacman -S --needed --noconfirm bind-tools
    sudo pacman -S --needed --noconfirm traceroute
    sudo pacman -S --needed --noconfirm postgresql-libs

    # Build deps
    sudo pacman -S --needed --noconfirm yarn
    sudo pacman -S --needed --noconfirm npm
    sudo pacman -S --needed --noconfirm rust
    sudo pacman -S --needed --noconfirm xmlsec
    sudo pacman -S --needed --noconfirm mysql

    # Shell goodies
    sudo pacman -S --needed --noconfirm bat
    sudo pacman -S --needed --noconfirm ctags
    sudo pacman -S --needed --noconfirm exa
    sudo pacman -S --needed --noconfirm fd
    sudo pacman -S --needed --noconfirm fzf
    sudo pacman -S --needed --noconfirm httpie
    sudo pacman -S --needed --noconfirm k9s
    sudo pacman -S --needed --noconfirm ripgrep
    sudo pacman -S --needed --noconfirm sd
    sudo pacman -S --needed --noconfirm fish

    # Code tools
    sudo pacman -S --needed --noconfirm rust-analyzer
    sudo pacman -S --needed --noconfirm shellcheck
    sudo pacman -S --needed --noconfirm jq
    sudo pacman -S --needed --noconfirm terraform

    # Org mode dependencies
    sudo pacman -S --noconfirm --needed texlive-core
    sudo pacman -S --noconfirm --needed texlive-bin
    sudo pacman -S --noconfirm --needed texlive-science
    sudo pacman -S --noconfirm --needed gnuplot sqlite
}

install_base_arch () {
    sudo pacman -S --needed --noconfirm autoconf
    sudo pacman -S --needed --noconfirm base-devel
    sudo pacman -S --needed --noconfirm bind-tools
    sudo pacman -S --needed --noconfirm curl
    sudo pacman -S --needed --noconfirm htop
    sudo pacman -S --needed --noconfirm inotify-tools
    sudo pacman -S --needed --noconfirm iotop
    sudo pacman -S --needed --noconfirm kubectl
    sudo pacman -S --needed --noconfirm neovim
    sudo pacman -S --needed --noconfirm cmake
    sudo pacman -S --needed --noconfirm p7zip
    sudo pacman -S --needed --noconfirm pkgconf
    sudo pacman -S --needed --noconfirm tmux
    sudo pacman -S --needed --noconfirm postgresql-libs

    # Build deps
    sudo pacman -S --needed --noconfirm mysql
    sudo pacman -S --needed --noconfirm npm
    sudo pacman -S --needed --noconfirm python-pip
    sudo pacman -S --needed --noconfirm python3
    sudo pacman -S --needed --noconfirm rust
    sudo pacman -S --needed --noconfirm xmlsec

    # Shell goodies
    sudo pacman -S --needed --noconfirm ctags
    sudo pacman -S --needed --noconfirm fd
    sudo pacman -S --needed --noconfirm fzf
    sudo pacman -S --needed --noconfirm httpie
    sudo pacman -S --needed --noconfirm k9s
    sudo pacman -S --needed --noconfirm reflector  # arch mirrors update
    sudo pacman -S --needed --noconfirm fish

    # Code tools
    sudo pacman -S --needed --noconfirm rust-analyzer
    sudo pacman -S --needed --noconfirm shellcheck
    sudo pacman -S --needed --noconfirm jq
    sudo pacman -S --needed --noconfirm terraform

    # Org mode dependencies
    sudo pacman -S --noconfirm --needed texlive-core
    sudo pacman -S --noconfirm --needed texlive-bin
    sudo pacman -S --noconfirm --needed texlive-science
    sudo pacman -S --noconfirm --needed gnuplot sqlite

}


install_go_packages() {
    export GOPATH=~/code/go

    go get -u github.com/motemen/gore/cmd/gore
    go get -u github.com/stamblerre/gocode
    go get -u golang.org/x/tools/cmd/godoc
    go get -u golang.org/x/tools/cmd/goimports
    go get -u golang.org/x/tools/cmd/gorename
    go get -u golang.org/x/tools/cmd/guru
    go get -u github.com/cweill/gotests/...
    go get -u github.com/fatih/gomodifytags
    go get -u github.com/ericchiang/pup
}

install_devspace() {
    curl -s -L "https://github.com/devspace-cloud/devspace/releases/latest" | sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;

    sudo install devspace /usr/local/bin;
}

install_npm_deps () {
    sudo npm install -g neovim

    # code tools
    sudo npm install -g standard
    sudo npm install -g prettier

    # lang servers
    sudo npm install -g javascript-typescript-langserver
    sudo npm install -g pyright
    sudo npm install -g bash-language-server

    # tools
    sudo npm install -g elasticdump
    sudo npm install -g marked
    sudo npm install -g dockerfile-language-server-nodejs
}

install_python_deps () {
    # Code style libs.
    pip3 install -U --user black
    pip3 install -U --user flake8-polyfill
    pip3 install -U --user vim-vint
    pip3 install -U --user "python-language-server[all]"
    pip3 install -U --user jedi
    pip3 install -U --user flake8
    pip3 install -U --user radon  # dependency for flake8 that should be updated
    pip3 install -U --user bandit
    pip3 install -U --user mypy
    pip3 install -U --user pyflakes
    pip3 install -U --user pydocstyle
    pip3 install -U --user yamllint
    pip3 install -U --user pyinotify  # for inotifyexec

    # Interactive shell
    pip3 install -U --user ipython
    pip3 install -U --user ipdb
    pip3 install -U --user litecli
    pip3 install -U --user pgcli
    pip3 install -U --user iredis

    # System
    pip3 install -U --user docker-compose
    pip3 install -U --user neovim
    pip3 install -U --user pipenv

    # Good things
    pip3 install -U --user dataset
    pip3 install -U --user awscli
    pip3 install -U --user selenium
    pip3 install -U --user nptime
    pip3 install -U --user dateparser
    pip3 install -U --user python-dateutil

    # Stubs
    pip3 install -U --user django-stubs

    # Should come latest to avoid warnings with wrong version
    pip3 install -U --user requests
}


neovim_appimage () {
    wget https://github.com/neovim/neovim/releases/download/stable/nvim.appimage -O ~/.local/bin/nvim; chmod a+x ~/.local/bin/nvim
}


identify_os () {
    . /etc/os-release
    echo "$NAME" | tr '[:upper:]' '[:lower:]'
}


install_fish() {
    fish -c "fisher add jethrokuan/z"
}

main () {
    OS_DETECTED=$(identify_os)

    if [ "$OS_DETECTED" == "ubuntu" ]; then
        echo "Ubuntu detected"
        install_base_debian


    elif [ "$OS_DETECTED" == "debian gnu/linux" ]; then
        echo "Ubuntu detected"
        install_base_debian

    elif [ "$OS_DETECTED" == "arch linux" ]; then
        echo "Arch detected"
        install_base_arch
        install_go_packages

    elif [ "$OS_DETECTED" == "manjaro linux" ]; then
        echo "Manjaro detected"
        install_base_manjaro
        install_go_packages

    elif [ "$OS_DETECTED" == "arch linux arm" ]; then
        echo "Arch detected"
        install_base_arch
    fi

    install_npm_deps
    install_python_deps
    install_fish
}


main

