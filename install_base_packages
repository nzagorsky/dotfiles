#!/usr/bin/env bash

install_base_ubuntu () {

    sudo apt-get update
    sudo apt-get install -y \
        bat \
        build-essential \
        cargo \
        sshfs \
        cmake \
        curl \
        openssh-server \
        fd-find \
        fish \
        sqlite3 \
        golang \
        htop \
        httpie \
        iotop \
        jq \
        libfontconfig1-dev \
        libfreetype6-dev \
        libpq-dev \
        libssl-dev \
        libx11-dev \
        libxcb-xfixes0-dev \
        libxft-dev \
        lm-sensors \
        neovim \
        net-tools \
        nodejs \
        npm \
        pkg-config \
        python3 \
        python3-dev \
        python3-pip \
        ripgrep \
        software-properties-common \
        tmux \
        universal-ctags \
        wget \
        && cargo install exa \
        && echo -e '\033[1mBase install success\033[0m'

    command -v rclone 2>/dev/null || curl -s https://rclone.org/install.sh | sudo bash
    command -v pulumi 2>/dev/null || curl -fsSL https://get.pulumi.com | sh
}

install_snap_packages() {
    sudo snap install bw
    sudo snap install kubectl
}

install_base_manjaro() {
    sudo pacman -S --quiet --needed --noconfirm \
        base-devel \
        bind-tools \
        cmake \
        ctags \
        curl \
        exa \
        fd \
        fish \
        fzf \
        go \
        helm \
        htop \
        httpie \
        jq \
        k9s \
        kubectl \
        neovim \
        npm \
        postgresql-libs \
        rclone \
        ripgrep \
        rust \
        rust-analyzer \
        sd \
        shellcheck \
        terraform \
        tldr \
        tmux \
        traceroute \
        wget \
        xmlsec \
        yarn \
        && echo -e '\033[1mBase install success\033[0m'
    }

install_base_arch () {
    sudo pacman -S --needed --noconfirm \
        autoconf \
        base-devel \
        bind-tools \
        cmake \
        ctags \
        curl \
        fd \
        fish \
        fzf \
        helm \
        htop \
        httpie \
        inotify-tools \
        iotop \
        jq \
        k9s \
        kubectl \
        mysql \
        neovim \
        npm \
        p7zip \
        pkgconf \
        postgresql-libs \
        python-pip \
        python3 \
        reflector \
        rust \
        rust-analyzer \
        shellcheck \
        terraform \
        tmux \
        xmlsec \
        && echo -e '\033[1mBase install success\033[0m'
    }


install_go_packages() {
    export GOPATH=~/code/go

    go get -u github.com/motemen/gore/cmd/gore
    go get -u github.com/stamblerre/gocode
    go get -u golang.org/x/tools/cmd/godoc
    go get -u golang.org/x/tools/cmd/goimports
    go get -u golang.org/x/tools/cmd/gorename
    go get -u golang.org/x/tools/cmd/guru
    go get -u github.com/cweill/gotests/...
    go get -u github.com/fatih/gomodifytags
    go get -u github.com/ericchiang/pup
}

install_devspace() {
    curl -s -L "https://github.com/devspace-cloud/devspace/releases/latest" | sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;

    sudo install devspace /usr/local/bin;
}

install_npm_deps () {
    sudo npm install -g \
        neovim \
        bash-language-server \
        dockerfile-language-server-nodejs \
        elasticdump \
        javascript-typescript-langserver \
        marked \
        prettier \
        pyright \
        standard \
        && echo -e '\033[1mNPM install success\033[0m'
    }

install_python_deps() {
    pip3 install -U --user setuptools wheel --no-warn-script-location

    pip3 install -U --user \
        "python-language-server[all]" \
        awscli \
        bandit \
        black \
        boto3 \
        bpytop \
        dataset \
        dateparser \
        django-stubs \
        docker-compose \
        flake8 \
        flake8-polyfill \
        ipdb \
        ipython \
        iredis \
        jedi \
        litecli \
        mypy \
        neovim \
        nptime \
        pgcli \
        pipenv \
        pulumi \
        pulumi-kubernetes \
        pydocstyle \
        pyflakes \
        pyinotify \
        python-dateutil \
        radon \
        requests \
        selenium \
        vim-vint \
        yamllint \
        --no-warn-script-location \
        && echo -e '\033[1mPIP install success\033[0m'
    }



identify_os () {
    . /etc/os-release
    echo "$NAME" | tr '[:upper:]' '[:lower:]'
}


install_fish() {
    fish -c "curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher"
    fish -c "fisher install jethrokuan/z"
}

install_neovim_plugins() {
    nvim test.py --headless +UpdateRemotePlugins +q
}

change_default_shell() {
    sudo chsh $(whoami) -s $(which fish)
}

main () {
    OS_DETECTED=$(identify_os)

    if [ "$OS_DETECTED" == "ubuntu" ]; then
        echo "Ubuntu detected"
        install_base_ubuntu > /dev/null
        install_snap_packages
        install_go_packages

    elif [ "$OS_DETECTED" == "arch linux" ]; then
        echo "Arch detected"
        install_base_arch
        install_go_packages

    elif [ "$OS_DETECTED" == "manjaro linux" ]; then
        echo "Manjaro detected"
        install_base_manjaro
        install_go_packages

    elif [ "$OS_DETECTED" == "arch linux arm" ]; then
        echo "Arch detected"
        install_base_arch
    else
        echo "Didn't detect OS"
        exit 1
    fi

    install_npm_deps > /dev/null
    install_python_deps > /dev/null
    install_fish > /dev/null
    install_neovim_plugins

    change_default_shell
}


main
