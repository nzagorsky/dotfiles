#!/usr/bin/env bash

# TODO REFACTOR TO USE ONE COMMAND

install_base_debian () {
    sudo apt-get update

    sudo apt-get install -y \
        cargo \
        curl \
        fd-find \
        fish \
        htop \
        httpie \
        iotop \
        neovim \
        net-tools \
        nodejs \
        npm \
        python3 \
        python3-pip \
        rclone \
        tmux \
        universal-ctags \
        wget \
    && echo "apt install success"

    install_base_snap
}

install_base_snap(){
    sudo snap install go --classic
}

install_base_manjaro() {
    # TODO
    # mysql \
    # reflector \

    # TODO
    # sudo pacman-mirrors -c Russia

    sudo pacman -S --quiet --needed --noconfirm \
        base-devel \
        go \
        rclone \
        bat \
        bind-tools \
        cmake \
        ctags \
        curl \
        exa \
        fd \
        fish \
        fzf \
        go \
        htop \
        httpie \
        jq \
        k9s \
        kubectl \
        neovim \
        npm \
        postgresql-libs \
        ripgrep \
        rust \
        rust-analyzer \
        sd \
        shellcheck \
        terraform \
        tmux \
        traceroute \
        wget \
        xmlsec \
        yarn \
    && echo -e '\033[1mBase install success\033[0m'
}

install_base_arch () {
    sudo pacman -S --needed --noconfirm autoconf
    sudo pacman -S --needed --noconfirm base-devel
    sudo pacman -S --needed --noconfirm bind-tools
    sudo pacman -S --needed --noconfirm curl
    sudo pacman -S --needed --noconfirm htop
    sudo pacman -S --needed --noconfirm inotify-tools
    sudo pacman -S --needed --noconfirm iotop
    sudo pacman -S --needed --noconfirm kubectl
    sudo pacman -S --needed --noconfirm neovim
    sudo pacman -S --needed --noconfirm cmake
    sudo pacman -S --needed --noconfirm p7zip
    sudo pacman -S --needed --noconfirm pkgconf
    sudo pacman -S --needed --noconfirm tmux
    sudo pacman -S --needed --noconfirm postgresql-libs

    # Build deps
    sudo pacman -S --needed --noconfirm mysql
    sudo pacman -S --needed --noconfirm npm
    sudo pacman -S --needed --noconfirm python-pip
    sudo pacman -S --needed --noconfirm python3
    sudo pacman -S --needed --noconfirm rust
    sudo pacman -S --needed --noconfirm xmlsec

    # Shell goodies
    sudo pacman -S --needed --noconfirm ctags
    sudo pacman -S --needed --noconfirm fd
    sudo pacman -S --needed --noconfirm fzf
    sudo pacman -S --needed --noconfirm httpie
    sudo pacman -S --needed --noconfirm k9s
    sudo pacman -S --needed --noconfirm reflector  # arch mirrors update
    sudo pacman -S --needed --noconfirm fish

    # Code tools
    sudo pacman -S --needed --noconfirm rust-analyzer
    sudo pacman -S --needed --noconfirm shellcheck
    sudo pacman -S --needed --noconfirm jq
    sudo pacman -S --needed --noconfirm terraform
}


install_go_packages() {
    export GOPATH=~/code/go

    go get -u github.com/motemen/gore/cmd/gore
    go get -u github.com/stamblerre/gocode
    go get -u golang.org/x/tools/cmd/godoc
    go get -u golang.org/x/tools/cmd/goimports
    go get -u golang.org/x/tools/cmd/gorename
    go get -u golang.org/x/tools/cmd/guru
    go get -u github.com/cweill/gotests/...
    go get -u github.com/fatih/gomodifytags
    go get -u github.com/ericchiang/pup
}

install_devspace() {
    curl -s -L "https://github.com/devspace-cloud/devspace/releases/latest" | sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;

    sudo install devspace /usr/local/bin;
}

install_npm_deps () {
    sudo npm install -g \
        neovim \
        bash-language-server \
        dockerfile-language-server-nodejs \
        elasticdump \
        javascript-typescript-langserver \
        marked \
        prettier \
        pyright \
        standard \
    && echo -e '\033[1mNPM install success\033[0m'
}

install_python_deps() {
    pip3 install -U --user \
        black \
        flake8-polyfill \
        vim-vint \
        "python-language-server[all]" \
        jedi \
        flake8 \
        radon \
        bandit \
        mypy \
        pyflakes \
        pydocstyle \
        yamllint \
        pyinotify \
        ipython \
        ipdb \
        litecli \
        pgcli \
        iredis \
        docker-compose \
        neovim \
        pipenv \
        dataset \
        awscli \
        selenium \
        nptime \
        dateparser \
        python-dateutil \
        django-stubs \
        requests \
        && echo -e '\033[1mPIP install success\033[0m'
}



identify_os () {
    . /etc/os-release
    echo "$NAME" | tr '[:upper:]' '[:lower:]'
}


install_fish() {
    fish -c "curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher"
    fish -c "fisher install jethrokuan/z"
}

change_default_shell() {
    sudo chsh toltenos -s $(which fish)
}

main () {
    OS_DETECTED=$(identify_os)

    if [ "$OS_DETECTED" == "ubuntu" ]; then
        echo "Ubuntu detected"
        install_base_debian
        install_go_packages

    elif [ "$OS_DETECTED" == "debian gnu/linux" ]; then
        echo "Ubuntu detected"
        install_base_debian

    elif [ "$OS_DETECTED" == "arch linux" ]; then
        echo "Arch detected"
        install_base_arch
        install_go_packages

    elif [ "$OS_DETECTED" == "manjaro linux" ]; then
        echo "Manjaro detected"
        install_base_manjaro
        install_go_packages

    elif [ "$OS_DETECTED" == "arch linux arm" ]; then
        echo "Arch detected"
        install_base_arch
    else
        echo "Didn't detect OS"
        exit 1
    fi

    install_npm_deps
    install_python_deps
    install_fish

    change_default_shell
}


main

