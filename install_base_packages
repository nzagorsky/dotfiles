#!/usr/bin/env bash

install_base_ubuntu () {
    sudo apt-get update -qq
    sudo apt-get install -y -qq \
        bat \
        build-essential \
        cargo \
        cmake \
        curl \
        fd-find \
        golang \
        htop \
        httpie \
        iotop \
        jq \
        libfontconfig1-dev \
        libfreetype6-dev \
        libpq-dev \
        libssl-dev \
        libx11-dev \
        libxcb-xfixes0-dev \
        libxft-dev \
        lm-sensors \
        neovim \
        net-tools \
        nodejs \
        npm \
        openssh-server \
        parallel \
        pkg-config \
        postgresql-client \
        pv \
        python3 \
        python3-dev \
        python3-pip \
        software-properties-common \
        sqlite3 \
        sshfs \
        tldr \
        tmux \
        universal-ctags \
        unzip \
        wget \
        zip \
        && cargo install exa -q \
        && cargo install ripgrep -q \
        && echo -e '\033[1mBase install success\033[0m'

    command -v rclone 2>/dev/null || curl -s https://rclone.org/install.sh | sudo bash
    command -v pulumi 2>/dev/null || curl -fsSL https://get.pulumi.com | sh
    tldr -u > /dev/null

    sudo sed -i '/PasswordAuthentication/c\PasswordAuthentication no' /etc/ssh/sshd_config
}


install_chromedriver() {
    set -e
    CHROMEDRIVER_RELEASE=$(curl -s https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
    wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip" -O /tmp/chromedriver.zip
    rm -rf /tmp/chromedriver/
    mkdir /tmp/chromedriver/
    unzip -qq /tmp/chromedriver.zip -d /tmp/chromedriver/
    chmod +x /tmp/chromedriver/chromedriver
    sudo cp /tmp/chromedriver/chromedriver /usr/local/bin/chromedriver
    echo Installed $CHROMEDRIVER_RELEASE chromedriver
}


install_go_packages() {
    export GOPATH=~/code/go

    go get -u github.com/motemen/gore/cmd/gore
    go get -u github.com/stamblerre/gocode
    go get -u golang.org/x/tools/cmd/godoc
    go get -u golang.org/x/tools/cmd/goimports
    go get -u golang.org/x/tools/cmd/gorename
    go get -u golang.org/x/tools/cmd/guru
    go get -u github.com/cweill/gotests/...
    go get -u github.com/fatih/gomodifytags
    go get -u github.com/ericchiang/pup
}

install_devspace() {
    curl -s -L "https://github.com/devspace-cloud/devspace/releases/latest" | sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;

    sudo install devspace /usr/local/bin;
}

install_npm_deps () {
    sudo npm install -g  --silent @bitwarden/cli
    sudo npm install -g --silent \
        neovim \
        bash-language-server \
        dockerfile-language-server-nodejs \
        elasticdump \
        javascript-typescript-langserver \
        marked \
        prettier \
        pyright \
        standard \
        && echo -e '\033[1mNPM install success\033[0m'
    }

install_python_deps() {
    pip3 install -U --user setuptools wheel --no-warn-script-location

    pip3 install -U --user \
        "python-language-server[all]" \
        awscli \
        bandit \
        black \
        boto3 \
        bpytop \
        dataset \
        dateparser \
        django-stubs \
        docker-compose \
        flake8 \
        flake8-polyfill \
        ipdb \
        ipython \
        iredis \
        jedi \
        litecli \
        mypy \
        neovim \
        nptime \
        pgcli \
        pipenv \
        pulumi \
        pulumi-kubernetes \
        pulumi-aws \
        pulumi-hcloud \
        pydocstyle \
        pyflakes \
        pyinotify \
        python-dateutil \
        radon \
        requests \
        selenium \
        youtube-dl \
        vim-vint \
        yamllint \
        --no-warn-script-location \
        && echo -e '\033[1mPIP install success\033[0m'
    }



identify_os () {
    . /etc/os-release
    echo "$NAME" | tr '[:upper:]' '[:lower:]'
}


install_neovim_plugins() {
    nvim test.py --headless +UpdateRemotePlugins +q
}

change_default_shell() {
    sudo chsh $(whoami) -s /bin/zsh
}

main () {
    OS_DETECTED=$(identify_os)

    if [ "$OS_DETECTED" == "ubuntu" ]; then
        echo "Ubuntu detected"
        install_base_ubuntu
        install_go_packages
    else
        echo "Didn't detect OS"
        exit 1
    fi

    install_npm_deps
    install_python_deps
    install_chromedriver
    install_neovim_plugins

    change_default_shell
}


main
