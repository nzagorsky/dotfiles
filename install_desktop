#!/usr/bin/env bash
# This file represents installation scripts for Gnome and common desktop tools.
# OSes currently supported: Ubuntu

EXTENSION_INSTALLER=~/.scripts/gnome-shell-extension-installer

identify_os () {
    . /etc/os-release
    echo $NAME | tr '[:upper:]' '[:lower:]'
}


setup_docker_ubuntu() {
    sudo apt-get install -y docker.io
    sudo systemctl enable docker --now
    sudo gpasswd -a $USER docker
}

setup_user() {
    sudo gpasswd -a $USER rfkill
}

install_ubuntu_mainline() {
    sudo add-apt-repository -y ppa:cappelikan/ppa
    sudo apt update
    sudo apt install mainline

    wget https://raw.githubusercontent.com/pimlie/ubuntu-mainline-kernel.sh/master/ubuntu-mainline-kernel.sh
    chmod +x ubuntu-mainline-kernel.sh
    sudo mv ubuntu-mainline-kernel.sh /usr/local/bin/
}

install_gnome_extension() {
    extension_name=$1
    extension_id=$2
    gnome-extensions list | grep $extension_name > /dev/null  || $EXTENSION_INSTALLER --yes $extension_id; gnome-extensions enable $extension_name
}

configure_gnome () {
    # Put dconf settings in
    dconf load  / < assets/gnome/dconf.conf
    gsettings set org.gnome.shell.app-switcher current-workspace-only true
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 20
    gsettings set org.gnome.desktop.peripherals.keyboard delay 200

    # Do not install extensions if they are installed already.
    gnome-extensions info -q gsconnect@andyholmes.github.io > /dev/null && return

    # Disable all extensions first
    for EXT in $(gnome-extensions list)
    do
        gnome-extensions disable $EXT
    done

    # Install and enable required extensions
    $EXTENSION_INSTALLER --update
    install_gnome_extension gsconnect@andyholmes.github.io 1319  # GSconnect
    install_gnome_extension disable-workspace-switcher-popup@github.com 959   # Workspace switch popup disabler
    install_gnome_extension audio-switcher@AndresCidoncha 1092  # Audio input/output switch from top bar
    install_gnome_extension appindicatorsupport@rgcjonas.gmail.com 615  # KStatusNotifierItem
    install_gnome_extension mprisindicatorbutton@JasonLG1979.github.io 1379  # MPRIS indicator button
    install_gnome_extension bluetooth-quick-connect@bjarosze.gmail.com 1401  # Bluetooth quick connect
    install_gnome_extension impatience@gfxmonk.net 277  # Faster animations
    install_gnome_extension user-theme@gnome-shell-extensions.gcampax.github.com 19  # Shell themes

    # install_gnome_extension dash-to-dock@micxgx.gmail.com 307  # dash to dock
    # install_gnome_extension disableworkspaceanim@owilliams.mixxx.org 1328  # Workspace switch animation disabler
    # install_gnome_extension auto-move-windows@gnome-shell-extensions.gcampax.github.com 16  # AutoMoveWindows
    # install_gnome_extension unite@hardpixel.eu 1287  # Unite
    # install_gnome_extension caffeine@patapon.info 517  # caffeine
    # install_gnome_extension dash-to-panel@jderose9.github.com 1160  # Dash to panel
    # install_gnome_extension blyr@yozoon.dev.gmail.com 1251  # blyr
    # install_gnome_extension hidetopbar@mathieu.bidon.ca 545  # hide top bar
}

install_snap_packages() {
    sudo snap install --beta authy
    sudo snap install mailspring
}
install_flatpak_packages() {
    flatpak install -y com.github.calo001.fondo
}

install_ldac_ubuntu() {
    dpkg --no-pager -l pulseaudio-modules-bt > /dev/null && return

    sudo add-apt-repository -y ppa:berglh/pulseaudio-a2dp
    sudo apt install -y -qq pulseaudio-modules-bt libldac
    pulseaudio -k
}

install_chrome_ubuntu() {
    dpkg -s google-chrome-stable &>/dev/null && return 0

    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/chrome.deb
    sudo dpkg -i /tmp/chrome.deb
    rm /tmp/chrome.deb
}

install_toptracker_ubuntu() {
    dpkg -s toptracker &>/dev/null && return 0

    wget https://tracker-api.toptal.com/desktop/latest/debian -O /tmp/toptracker.deb
    sudo dpkg -i /tmp/toptracker.deb
    rm /tmp/toptracker.deb
}

install_mega_ubuntu() {
    dpkg -s megasync &>/dev/null && return 0

    wget https://mega.nz/linux/MEGAsync/xUbuntu_20.10/amd64/megasync-xUbuntu_20.10_amd64.deb -O /tmp/megasync.deb
    sudo dpkg -i /tmp/megasync.deb
    rm /tmp/megasync.deb
}

install_base_desktop_ubuntu() {
    sudo apt-get update

    install_ldac_ubuntu


    sudo apt-get install -y \
        chrome-gnome-shell \
        fonts-hack-ttf \
        gdebi \
        mpv \
        gnome-tweak-tool \
        openvpn \
        pavucontrol \
        pulsemixer \
        sqlitebrowser \
        flatpak \
        gnome-software-plugin-flatpak \
        telegram-desktop \
        transmission-gtk \
        xclip \
        && flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo \
        && setup_docker_ubuntu \
        && >&2 echo -e '\033[1mBase desktop packages are installed\033[0m'
    }

install_cargo_packages() {
    if ! command -v alacritty &> /dev/null 
    then
        BUILD_PATH=/tmp/alacritty
        cargo install alacritty --root $BUILD_PATH; sudo cp $BUILD_PATH/bin/alacritty /usr/bin/alacritty


        sudo cp assets/alacritty/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
        sudo desktop-file-install assets/alacritty/Alacritty.desktop
        sudo update-desktop-database
    fi
}

main () {
    OS_DETECTED=`identify_os`
    echo -e "\033[1m"
    echo "------------------------------"
    echo "OS: $OS_DETECTED"
    echo "Desktop: $XDG_SESSION_DESKTOP"
    echo "------------------------------"
    echo -e "\033[0m"



    if [ "$OS_DETECTED" == "ubuntu" ]; then
        install_base_desktop_ubuntu
        install_snap_packages > /dev/null
        install_cargo_packages > /dev/null
        install_flatpak_packages > /dev/null

        install_chrome_ubuntu
        install_toptracker_ubuntu
        install_mega_ubuntu
        install_ubuntu_mainline

    else
        echo "Did not detect OS. Quitting."
        exit 1

    fi
    # ------------------------------------------

    if [ "$XDG_SESSION_DESKTOP" == "gnome" ]; then
        configure_gnome
    elif [ "$XDG_SESSION_DESKTOP" == "ubuntu" ]; then
        configure_gnome

    else
        echo "Did not detect session. Check XDG_SESSION_DESKTOP variable. Current value is $XDG_SESSION_DESKTOP"
        exit 1
    fi

}

main
