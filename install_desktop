#!/usr/bin/env bash
# This file represents installation scripts for Gnome and common desktop tools.
# OSes currently supported: Manjaro, Arch, Ubuntu

EXTENSION_INSTALLER=~/.scripts/gnome-shell-extension-installer

identify_os () {
    . /etc/os-release
    echo $NAME | tr '[:upper:]' '[:lower:]'
}

setup_yay () {
    git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -si
}

setup_docker_ubuntu() {
    sudo apt-get install -y docker.io
    sudo systemctl enable docker --now
    sudo gpasswd -a $USER docker
}

setup_docker_arch() {
    sudo pacman -S --needed --noconfirm docker
    sudo systemctl enable docker --now
    sudo gpasswd -a $USER docker
}


setup_user() {
    sudo gpasswd -a $USER rfkill
}

# NOTE: not used
# TODO move scripts alike to helpers
virtd() {
    sudo pacman -S libvirt qemu ebtables virt-manager --needed --noconfirm
    sudo gpasswd -a $USER kvm
    sudo gpasswd -a $USER libvirt
    sudo systemctl enable libvirtd --now
}

install_yay_packages() {
    yay -S --needed --noconfirm  \
        authy \
        dbeaver \
        fondo \
        google-chrome \
        mailspring \
        spotify \
        rancher-k3d-bin \
        toptracker \
        xsv-bin \
	&& echo -e '\033[1mAUR packages are installed\033[0m'
}

install_base_desktop_manjaro() {
    # Handle groups
    sudo gpasswd -a $USER input

    # Install packages.
    sudo pacman -S --needed --noconfirm \
        alacritty \
        bluez-tools \
        bluez-utils \
        chrome-gnome-shell \
        openvpn \
        pavucontrol \
        pulsemixer \
        rclone \
        sqlitebrowser \
        telegram-desktop \
        transmission-gtk \
        xclip \
        yay \
    && setup_docker_arch \
	&& echo -e '\033[1mBase desktop packages are installed\033[0m'

}

install_base_desktop_arch () {
    # Check if yay is present and install it if not.
    command -v yay || setup_yay

    sudo pacman -S --needed --noconfirm telegram-desktop
    sudo pacman -S --needed --noconfirm openvpn
    sudo pacman -S --needed --noconfirm rclone  # backups
    sudo pacman -S --needed --noconfirm playerctl  # Control player from keyboard
    sudo pacman -S --needed --noconfirm kitty  # GPU term
    sudo pacman -S --needed --noconfirm alacritty  # GPU term
    sudo pacman -S --needed --noconfirm xclip  # neovim shared copy/paste buffer
    sudo pacman -S --needed --noconfirm dnsmasq

    setup_docker_arch

    # BT Sound and A2DP
    sudo pacman -S --needed --noconfirm pulseaudio-bluetooth
    sudo pacman -S --needed --noconfirm pavucontrol
    sudo pacman -S --needed --noconfirm pulsemixer
    sudo pacman -S --needed --noconfirm bluez-tools bluez-utils

    # Fonts
    # https://wiki.archlinux.org/index.php/Fonts
    sudo pacman -S --needed --noconfirm gnu-free-fonts
    sudo pacman -S --needed --noconfirm noto-fonts
    sudo pacman -S --needed --noconfirm noto-fonts-emoji
    sudo pacman -S --needed --noconfirm noto-fonts-extra
    sudo pacman -S --needed --noconfirm ttf-hack  # Terminal
    sudo pacman -S --needed --noconfirm ttf-liberation  # Mono fonts in browsers
    sudo pacman -S --needed --noconfirm ttf-roboto
    sudo pacman -S --needed --noconfirm ttf-roboto-mono
    yay -S --needed --noconfirm consolas-font

}

install_gnome_extension() {
    extension_name=$1
    extension_id=$2

    gnome-extensions list | grep $extension_name > /dev/null  || \
        $EXTENSION_INSTALLER --yes $extension_id
    gnome-extensions enable $extension_name
}

configure_gnome () {
    # Put dconf settings in
    dconf load  / < optional/dconf.conf
    gsettings set org.gnome.shell.app-switcher current-workspace-only true
    gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 20
    gsettings set org.gnome.desktop.peripherals.keyboard delay 200
    gsettings set org.gnome.Epiphany.web:/ hardware-acceleration-policy 'always'

    # Disable all extensions first
    for EXT in $(gnome-extensions list)
    do
        gnome-extensions disable $EXT
    done

    # Install and enable required extensions
    $EXTENSION_INSTALLER --update
    install_gnome_extension gsconnect@andyholmes.github.io 1319  # GSconnect
    install_gnome_extension disable-workspace-switcher-popup@github.com 959   # Workspace switch popup disabler
    install_gnome_extension audio-switcher@AndresCidoncha 1092  # Audio input/output switch from top bar
    install_gnome_extension appindicatorsupport@rgcjonas.gmail.com 615  # KStatusNotifierItem

    # install_gnome_extension disableworkspaceanim@owilliams.mixxx.org 1328  # Workspace switch animation disabler
    # install_gnome_extension auto-move-windows@gnome-shell-extensions.gcampax.github.com 16  # AutoMoveWindows
    # install_gnome_extension unite@hardpixel.eu 1287  # Unite
    # install_gnome_extension caffeine@patapon.info 517  # caffeine
    # install_gnome_extension dash-to-panel@jderose9.github.com 1160  # Dash to panel
    # install_gnome_extension blyr@yozoon.dev.gmail.com 1251  # blyr
    # install_gnome_extension dash-to-dock@micxgx.gmail.com 307  # dash to dock
    # install_gnome_extension hidetopbar@mathieu.bidon.ca 545  # hide top bar
}

# TODO mega, chrome, toptracker
install_snap_packages() {
    sudo snap install --beta authy
    sudo snap install mailspring
    sudo snap install insomnia
    sudo snap install dbeaver-ce
    sudo snap install spotify
}
install_flatpak_packages() {
    flatpak install -y com.github.calo001.fondo
}

install_base_desktop_ubuntu() {
    sudo apt-get update
    sudo apt-get install -y \
        chrome-gnome-shell \
        fonts-hack-ttf \
        gdebi \
        mpv \
        gnome-tweak-tool \
        openvpn \
        pavucontrol \
        pulsemixer \
        sqlitebrowser \
        flatpak \
        gnome-software-plugin-flatpak \
        telegram-desktop \
        transmission-gtk \
        xclip \
    && flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo \
    && setup_docker_ubuntu \
	&& >&2 echo -e '\033[1mBase desktop packages are installed\033[0m'
}

install_cargo_packages() {
    if ! command -v alacritty &> /dev/null 
    then
        BUILD_PATH=/tmp/alacritty
        cargo install alacritty --root $BUILD_PATH; sudo cp $BUILD_PATH/bin/alacritty /usr/bin/alacritty
    fi
}

main () {
    OS_DETECTED=`identify_os`
    echo -e "\033[1m"
    echo "------------------------------"
    echo "OS: $OS_DETECTED"
    echo "Desktop: $XDG_SESSION_DESKTOP"
    echo "------------------------------"
    echo -e "\033[0m"

    if [ "$OS_DETECTED" == "arch linux" ]; then
        setup_user
        install_base_desktop_arch
        install_yay_packages

    elif [ "$OS_DETECTED" == "manjaro linux" ]; then
        install_base_desktop_manjaro
        install_yay_packages

    elif [ "$OS_DETECTED" == "ubuntu" ]; then
        install_base_desktop_ubuntu > /dev/null
        install_snap_packages > /dev/null
        install_cargo_packages > /dev/null
        install_flatpak_packages > /dev/null
    else
        echo "Did not detect OS. Quitting."
        exit 1
    fi
    # ------------------------------------------

    if [ "$XDG_SESSION_DESKTOP" == "gnome" ]; then
        configure_gnome
    elif [ "$XDG_SESSION_DESKTOP" == "ubuntu" ]; then  # fucking smart, eh?
        configure_gnome
    else
        echo "Did not detect session. Check XDG_SESSION_DESKTOP variable. Current value is $XDG_SESSION_DESKTOP"
        exit 1
    fi

}

main
