[include]
        path = .gitconfig.local
[core]
        excludesfile = ~/.gitignore
        autocrlf = input
        precomposeunicode = true
        editor = nvim
[color]
        ui = auto
[color "branch"]
        current = red
        local = yellow
        remote = green
[color "diff"]
        meta = cyan
        frag = magenta
        old = red bold
        new = green bold
[color "status"]
        added = yellow
        changed = green
        untracked = cyan
[alias]
        st = status -sb
        ci = commit
        co = checkout
        br = branch
        cp = cherry-pick
        cps = cherry-pick -s
        dif = diff
        today = diff @{yesterday}.. --stat
        meh = commit --amend
        wdiff = diff --word-diff=color
        wshow = show --word-diff=color
        lasttag = describe --tags --abbrev=0
        branches = branch -vv
        pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
        getbranch = "!x() { git co origin/$1 -b $1; }; x"
        fixbranch = "!x() { b=`git symbolic-ref -q --short HEAD` && git rebase --onto $b master $1 && git diff --stat $b && git checkout $b; }; x"
        autotrack = "!x() { b=`git symbolic-ref -q --short HEAD` && git branch -u \"origin/$b\" || echo \"error: not a branch\"; }; x"
        slog = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%cn%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
        glog = log --graph --pretty=format:"%C(auto,yellow)%h%C(auto)%d\\ %C(auto,reset)%s\\ \\ [%C(auto,blue)%an%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)]"
        gflog = log -p --cc --graph --decorate
        wtf = log --pretty=format:"%C(auto,yellow)%h%C(auto)%d%C(auto,reset)\\ by\\ %C(auto,blue)%an%C(auto,reset),\\ %C(auto,cyan)%ar%C(auto,reset)%n\\ %s%n" --stat
        unci = reset HEAD^
        uncommit = reset HEAD^
        ls = ls-files
        rup = !git remote update `git rev-parse --symbolic-full-name HEAD@{u}|cut -d/ -f3`
        in = !git wtf HEAD..HEAD@{u}
        out = !git wtf HEAD@{u}..HEAD
        killbranches = !git branch | grep -v '\\bmaster\\b' | xargs git branch -d 2> /dev/null
        sync = !git pull --rebase && git push
        down = "!git remote update; git pull --ff-only"
        comerge = "!x() { target=`git symbolic-ref HEAD`; git co $1; git merge $target; }; x"
        pill = pull
        ours = "!f() { git checkout --ours -- $@ && git add -- $@; }; f"
        theirs = "!f() { git checkout --theirs -- $@ && git add -- $@; }; f"
        assume = update-index --assume-unchanged
        unassume = update-index --no-assume-unchanged
        unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
        assumed = "!git ls-files -v | grep ^h | cut -c 3-"
        authors = shortlog -sn
        serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/
        serveall = daemon --verbose --export-all --base-path=. --reuseaddr .
        addpr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"
        addprx = "!f() { b=`git symbolic-ref -q --short HEAD` && \
                echo \"Making branch for pull request #$1 [pr/$1]\" && \
                git fetch origin pull/$1/head:pr/$1 && \
                echo \"Rebasing pr/$1 onto $b...\" && \
                git fetch -q -f origin pull/$1/merge:refs/PR_MERGE_HEAD && \
                git rebase -q --onto $b PR_MERGE_HEAD^ pr/$1 && \
                git checkout -q $b && echo && \
                git diff --stat $b..pr/$1 && echo && \
                git log --oneline $b..pr/$1; \
                git update-ref -d refs/PR_MERGE_HEAD; \
                }; f"
[instaweb]
        httpd=webrick
[push]
        default=current
[diff]
        algorithm = patience
[filter "lfs"]
        clean = git lfs clean %f
        smudge = git lfs smudge %f
        required = true
[user]
        email = toltenos@gmail.com
	    name = Nikita Zagorsky
[merge]
        tool = vimdiff3
[mergetool "vimdiff3"]
        cmd = nvim -f -d \"$LOCAL\" \"$MERGED\" \"$REMOTE\"
[http "https://gopkg.in"]
	followRedirects = true
[http]
	postBuffer = 157286400
[pull]
	rebase = false
[init]
	defaultBranch = master
