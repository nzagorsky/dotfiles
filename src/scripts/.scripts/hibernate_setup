#!/usr/bin/env python3
"""
Script to setup swapfile hibernation.
Should be executed as root.
"""

import os
import re
import shutil
import subprocess
import sys

# TODO consider writing to /etc/fstab
# TODO check free space before creation of swap image
# TODO ensure image_size does not exceed total swap size

SWAPFILE_PATH = "/swap.hibernate.img"
INITRAMFS_RESUME = "/etc/initramfs-tools/conf.d/resume"
GRUB_CONFIG_SOURCE = "/etc/default/grub"
BACKUP_FOLDER = "~/.local/share/backups/"


def _exec_command(command):
    return subprocess.run(
        command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )


def get_free_disk_space() -> int:
    _, _, free = shutil.disk_usage("/")
    return free  # bytes


def get_total_memory_used() -> int:
    total_mem_used = (
        _exec_command(
            """
    MEM_USED=$(free -b | grep Mem: | awk '{{print $3}}')
    SWAP_USED=$(free -b | grep Swap: | awk '{{print $3}}')
    TOTAL_MEM_USED=$(expr $MEM_USED + $SWAP_USED)
    echo $TOTAL_MEM_USED
    """
        )
        .stdout.decode()
        .strip()
    )
    return int(total_mem_used)


def get_required_swap_size() -> int:
    return int(get_total_memory_used() * 1.2)  # bytes

def get_required_image_size() -> int:
    return int(get_total_memory_used() * 1.1)  # bytes


def get_swapfile_info():
    swap_uuid = (
        _exec_command(f"findmnt -no UUID -T {SWAPFILE_PATH}").stdout.decode().strip()
    )
    swap_offset = (
        _exec_command(
            f"filefrag -v {SWAPFILE_PATH} | head -n 4 | tail -n '-1' | awk '{{print $4}}' | awk -F'.' '{{print $1}}'"
        )
        .stdout.decode()
        .strip()
    )

    return swap_uuid, swap_offset


def check_hibernation_setup():
    swap_uuid, swap_offset = get_swapfile_info()
    is_hibernation_configured = all([swap_uuid, swap_offset])

    # Verify swap is mounted
    if SWAPFILE_PATH not in _exec_command("swapon").stdout.decode().strip():
        is_hibernation_configured = False

    # Verify presence of resume in initramfs and grub
    if is_hibernation_configured:
        for filepath in [INITRAMFS_RESUME, GRUB_CONFIG_SOURCE]:
            with open(filepath) as f:
                data = f.read()
                if swap_uuid not in data or swap_offset not in data:
                    is_hibernation_configured = False

    return is_hibernation_configured


def update_image_size():
    os.system(
        f"""
        IMAGE_SIZE={get_required_image_size()}

        echo $IMAGE_SIZE > /sys/power/image_size

        echo Setting image_size to $(expr $IMAGE_SIZE / 1024 / 1024)Mb
        """
    )


# Create swap
def create_swap():
    os.system(
        f"""
        # NOTE: below you can find systemd update found in the web, but it can be done better with overlays.
        # cp /usr/lib/systemd/system/systemd-suspend.service $BACKUP_FOLDER
        # sed -i 's/ suspend/ hybrid-sleep/g' /usr/lib/systemd/system/systemd-suspend.service

        set -e

        SWAP_SIZE={get_required_swap_size()}

        if test -f "{SWAPFILE_PATH}"; then
            swapoff {SWAPFILE_PATH} || echo "{SWAPFILE_PATH} is not enabled as swap"
            rm {SWAPFILE_PATH}
        fi

        # Backup
        mkdir -p {BACKUP_FOLDER}
        cp -n {GRUB_CONFIG_SOURCE} {BACKUP_FOLDER}

        # Get image size, create and mount swapfile

        echo "Creating swap of $(expr $SWAP_SIZE / 1024 / 1024 / 1024)Gb"

        fallocate -l $SWAP_SIZE {SWAPFILE_PATH}
        chmod 600 {SWAPFILE_PATH}
        mkswap {SWAPFILE_PATH}
        swapon {SWAPFILE_PATH}
        """
    )


def setup_resume():
    swap_uuid, swap_offset = get_swapfile_info()

    print(f"Using this to resume: '{swap_uuid}' '{swap_offset}'")
    with open(GRUB_CONFIG_SOURCE) as f:
        grub_lines = f.readlines()

    with open(GRUB_CONFIG_SOURCE, "w") as output:
        updated_lines = []
        try:
            for line in grub_lines:
                if "GRUB_CMDLINE_LINUX_DEFAULT" in line:
                    values = re.search('="(.*)"', line).group(1)
                    values = re.sub(r"  ", " ", values)
                    values = re.sub(r"resume=\S*", " ", values)
                    values = re.sub(r"resume_offset=\S*", " ", values)
                    values = str(values).strip()
                    line = f'GRUB_CMDLINE_LINUX_DEFAULT="resume=UUID={swap_uuid} resume_offset={swap_offset} {values}"\n'

                updated_lines.append(line)

            output.writelines(updated_lines)

        except Exception as e:
            print(f"ERROR MODIFYING {GRUB_CONFIG_SOURCE}", e)
            output.writelines(grub_lines)
            sys.exit(1)

    with open(INITRAMFS_RESUME, "w") as f:
        f.write(f"resume=UUID={swap_uuid} resume_offset={swap_offset}")

    update_image_size()

    os.system(
        """
        update-initramfs -u -k all
        update-grub
        """
    )


def setup():
    is_hibernation_configured = check_hibernation_setup()

    if not is_hibernation_configured:
        create_swap()
        setup_resume()
    else:
        print(f"Hibernation is configured on {get_swapfile_info()}")
        update_image_size()


if __name__ == "__main__":
    setup()
